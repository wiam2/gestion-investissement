// <auto-generated />
using System;
using MicroS_Postes.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroS_Postes.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240507150943_b")]
    partial class b
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroS_Postes.Entities.Like", b =>
                {
                    b.Property<int>("IdLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLike"));

                    b.Property<string>("IdLOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPoste")
                        .HasColumnType("int");

                    b.HasKey("IdLike");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MicroS_Postes.Entities.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatePoste")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Montant")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<int?>("NumLikes")
                        .HasColumnType("int");

                    b.Property<string>("Secteur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Postes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MicroS_Postes.Entities.PosteInvestisseur", b =>
                {
                    b.HasBaseType("MicroS_Postes.Entities.Poste");

                    b.Property<string>("TypeInvestissement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PostesInvestisseurs", (string)null);
                });

            modelBuilder.Entity("MicroS_Postes.Entities.PosteStartup", b =>
                {
                    b.HasBaseType("MicroS_Postes.Entities.Poste");

                    b.Property<string>("EtapeDev")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PostesStartups", (string)null);
                });

            modelBuilder.Entity("MicroS_Postes.Entities.PosteInvestisseur", b =>
                {
                    b.HasOne("MicroS_Postes.Entities.Poste", null)
                        .WithOne()
                        .HasForeignKey("MicroS_Postes.Entities.PosteInvestisseur", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroS_Postes.Entities.PosteStartup", b =>
                {
                    b.HasOne("MicroS_Postes.Entities.Poste", null)
                        .WithOne()
                        .HasForeignKey("MicroS_Postes.Entities.PosteStartup", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
